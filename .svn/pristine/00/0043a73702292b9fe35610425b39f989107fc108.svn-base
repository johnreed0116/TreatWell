/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alberta.performa;

import com.alberta.model.Company;
import com.alberta.model.DoctorVO;
import com.alberta.model.PerformaVO;
import com.alberta.model.PrescriptionVO;
import com.alberta.model.User;
import com.alberta.service.ServiceFactory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONObject;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

/**
 *
 * @author farazahmad
 */
public class PerformaController extends MultiActionController {

    private ServiceFactory serviceFactory;

    /**
     * @return the serviceFactory
     */
    public ServiceFactory getServiceFactory() {
        return serviceFactory;
    }

    /**
     * @param serviceFactory the serviceFactory to set
     */
    public void setServiceFactory(ServiceFactory serviceFactory) {
        this.serviceFactory = serviceFactory;
    }

    public ModelAndView addAppointment(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        map.put("rightName", "Add Appointment");
        User user = (User) request.getSession().getAttribute("user");
        //map.put("patients", this.serviceFactory.getSetupService().getPatient(null, null));
        String userType = request.getSession().getAttribute("userType").toString();
        if (userType.equalsIgnoreCase("ADMIN")) {
            map.put("clinics", this.serviceFactory.getSetupService().getClinic(""));
        } else if (userType.equalsIgnoreCase("DOCTOR")) {
            map.put("doctorId", user.getDoctorId());
        }
        map.put("userType", userType);
        return new ModelAndView("clinic/addAppointment", "refData", map);
    }

    public void getAvailablePatientsForAppointment(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String date = request.getParameter("date");
        String clinicId = request.getParameter("clinicId");
        String doctorId = request.getParameter("doctorId");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Company com = (Company) request.getSession().getAttribute("company");
        List list = this.serviceFactory.getSetupService().getAvailablePatientsForAppointment(date, doctorId, clinicId);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public ModelAndView viewAppointments(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        map.put("rightName", "Appointments Summary");
        map.put("doctors", this.serviceFactory.getSetupService().getDoctors(null, null, null));
        return new ModelAndView("performa/viewAppointmentSummary", "refData", map);
    }

    public void saveAppointment(HttpServletRequest request, HttpServletResponse response, PerformaVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);
        String userType = request.getSession().getAttribute("userType").toString();
        JSONObject obj = new JSONObject();
        if (userType.equalsIgnoreCase("ADMIN")) {
            vo.setClinicId(request.getParameter("clinicId"));
            boolean flag = this.serviceFactory.getPerformaService().saveAppointment(vo);
            if (flag) {
                obj.put("msg", "saved");
            } else {
                obj.put("msg", "error");
            }
        } else {
            Map clinic = (Map) request.getSession().getAttribute("selectedClinic");
            if (clinic != null) {
                vo.setClinicId(clinic.get("TW_CLINIC_ID").toString());
                boolean flag = this.serviceFactory.getPerformaService().saveAppointment(vo);
                if (flag) {
                    obj.put("msg", "saved");
                } else {
                    obj.put("msg", "error");
                }
            } else {
                obj.put("msg", "no_clinic");
            }
        }

        response.getWriter().write(obj.toString());
    }

    public void getDoctorsByService(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String serviceId = request.getParameter("serviceId");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Company com = (Company) request.getSession().getAttribute("company");
        List list = this.serviceFactory.getSetupService().getDoctorsByService(serviceId, com.getCompanyId());
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getAppointmentsForDoctor(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Company com = (Company) request.getSession().getAttribute("company");
        List list = this.serviceFactory.getPerformaService().getAppointmentsForDoctor(doctorId, com.getCompanyId());
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getAppointmentsForDate(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String date = request.getParameter("appointmentDate");
        String doctorName = request.getParameter("doctorName");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Company com = (Company) request.getSession().getAttribute("company");
        String userType = request.getSession().getAttribute("userType").toString();
        String clinicId = "";
        if (userType.equalsIgnoreCase("DOCTOR")) {
            Map clinic = (Map) request.getSession().getAttribute("selectedClinic");
            clinicId = clinic.get("TW_CLINIC_ID").toString();
        }
        List list = this.serviceFactory.getPerformaService().getAppointmentsForDate(date, clinicId);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void updateAppointmentStatus(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        String id = request.getParameter("appointmentId");
        String status = request.getParameter("status");
        boolean flag = this.serviceFactory.getPerformaService().updateAppointmentStatus(id, status, userName);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("msg", "saved");
        } else {
            obj.put("msg", "error");
        }
        response.getWriter().write(obj.toString());
    }

    public void updateAppointmentDateTime(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        String id = request.getParameter("appointmentId");
        String time = request.getParameter("time");
        String date = request.getParameter("date");
        boolean flag = this.serviceFactory.getPerformaService().updateAppointmentDateTime(id, date, time, userName);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("msg", "saved");
        } else {
            obj.put("msg", "error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addDoctorProcedure(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        map.put("rightName", "Procedure Fee");
        String doctorId = "";
        User user = (User) request.getSession().getAttribute("user");
        String userType = request.getSession().getAttribute("userType").toString();
        if (userType.equalsIgnoreCase("ADMIN")) {
            map.put("doctorNames", this.serviceFactory.getSetupService().getDoctors(""));
        } else if (userType.equalsIgnoreCase("DOCTOR")) {
            doctorId = user.getDoctorId();
            map.put("doctorId", doctorId);
        }
        map.put("userType", userType);
        map.put("medicalProcedures", this.serviceFactory.getPerformaService().getMedicalProcedures(""));
        return new ModelAndView("performa/addDoctorServices", "refData", map);
    }

    public void saveDoctorProcedure(HttpServletRequest request, HttpServletResponse response, DoctorVO ds) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        ds.setDiscounts(request.getParameterValues("discountArr[]"));
        ds.setFees(request.getParameterValues("feeArr[]"));
        ds.setPanelId(request.getParameterValues("panelCompanyIdArr[]"));
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        ds.setCompanyId(companyId);
        ds.setUserName(userName);
        boolean flag = this.serviceFactory.getPerformaService().saveDoctorProcedure(ds);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDoctorProcedure(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorName = request.getParameter("doctorList");
        String panelCompanyId = request.getParameter("companyId");
        String appointmentId = request.getParameter("appointmentId");
        List<Map> list = this.serviceFactory.getPerformaService().getDoctorProcedures(doctorName, appointmentId, panelCompanyId);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public ModelAndView addPrescription(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String doctorId = request.getParameter("doctorId");
        if (doctorId == null) {
            doctorId = user.getDoctorId();
        }
        map.put("rightName", "Prescription");
        map.put("frequencies", this.serviceFactory.getSetupService().getFrequencies(""));
        map.put("doseUsage", this.serviceFactory.getSetupService().getDoseUsage(""));
        map.put("medicines", this.serviceFactory.getSetupService().getDoctorsMedicine(doctorId));
        map.put("labTests", this.serviceFactory.getPerformaService().getLabTests());
        map.put("diseases", this.serviceFactory.getSetupService().getDiseases("Y"));
        return new ModelAndView("setup/addPrescription", "refData", map);
    }

    public void getAppointedPatientsForDoctor(HttpServletRequest request, HttpServletResponse response) throws IOException {
        List<JSONObject> objList = new ArrayList();
        User user = (User) request.getSession().getAttribute("user");
        String doctorId = request.getParameter("doctorId");
        if (doctorId == null) {
            doctorId = user.getDoctorId();
        }
        Map clinic = (Map) request.getSession().getAttribute("selectedClinic");
        if (clinic != null) {
            String clinicId = clinic.get("TW_CLINIC_ID").toString();
            List<Map> list = this.serviceFactory.getPerformaService().getAppointedPatientsForDoctor(doctorId, clinicId);
            JSONObject obj = null;
            if (list != null && list.size() > 0) {
                for (int i = 0; i < list.size(); i++) {
                    Map map = (Map) list.get(i);
                    obj = new JSONObject();
                    Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                    while (itr.hasNext()) {
                        String key = itr.next().getKey();
                        obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                    }
                    objList.add(obj);
                }
            }
        }

        response.getWriter().write(objList.toString());
    }

    public void savePrescription(HttpServletRequest request, HttpServletResponse response, PrescriptionVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        User user = (User) request.getSession().getAttribute("user");
        vo.setMedicineId(request.getParameterValues("medicineIdArr[]"));
        vo.setQty(request.getParameterValues("qtyArr[]"));
        vo.setDays(request.getParameterValues("daysArr[]"));
        vo.setFrequencyId(request.getParameterValues("frequencyIdArr[]"));
        vo.setUsageId(request.getParameterValues("usageIdArr[]"));
        vo.setLabId(request.getParameterValues("labIdArr[]"));
        vo.setLabTestId(request.getParameterValues("labTestIdArr[]"));
        String userType = request.getSession().getAttribute("userType").toString();
        JSONObject obj = new JSONObject();
        if (userType.equalsIgnoreCase("DOCTOR")) {
            Map clinic = (Map) request.getSession().getAttribute("selectedClinic");
            if (clinic != null) {
                vo.setClinicId(clinic.get("TW_CLINIC_ID").toString());
                vo.setDoctorId(user.getDoctorId());
                String masterId = this.serviceFactory.getPerformaService().savePrescription(vo);
                if (!masterId.isEmpty()) {
                    obj.put("msg", "saved");
                    obj.put("masterId", masterId);
                } else {
                    obj.put("msg", "error");
                    obj.put("masterId", "");
                }
            } else {
                obj.put("msg", "no_clinic");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView searchPatient(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        String query = request.getParameter("searchTopPatient");
        if (query != null && !query.isEmpty()) {
            map.put("results", this.serviceFactory.getPerformaService().searchPatient(query));
        }
        return new ModelAndView("performa/viewPatientsSearch", "refData", map);
    }

    public ModelAndView viewHealthCards(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        map.put("rightName", "Health Card");
        return new ModelAndView("setup/viewHealthCards", "refData", map);
    }

    public void saveHealthCard(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setUserName(userName);
        JSONObject obj = new JSONObject();
        boolean flag = this.serviceFactory.getPerformaService().saveHealthCard(vo);
        if (flag) {
            obj.put("msg", "saved");
        } else {
            obj.put("msg", "error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getHealthCards(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getPerformaService().getHealthCards();
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void deleteHealthCard(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getPerformaService().deleteHealthCard(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getHealthCardById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String cardId = request.getParameter("cardId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getPerformaService().getHealthCardById(cardId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void saveAppointmentFee(HttpServletRequest request, HttpServletResponse response, PerformaVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);
        vo.setProcedureFeeId(request.getParameterValues("selectedId[]"));
        vo.setFeeAmount(request.getParameterValues("feeArr[]"));
        JSONObject obj = new JSONObject();
        boolean flag = this.serviceFactory.getPerformaService().saveAppointmentFee(vo);
        if (flag) {
            obj.put("msg", "saved");
        } else {
            obj.put("msg", "error");
        }
        response.getWriter().write(obj.toString());
    }

    public void saveCollectedFee(HttpServletRequest request, HttpServletResponse response, PerformaVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);
        JSONObject obj = new JSONObject();
        boolean flag = this.serviceFactory.getPerformaService().saveCollectedFee(vo);
        if (flag) {
            obj.put("msg", "saved");
        } else {
            obj.put("msg", "error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView viewInvoice(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        String id = request.getParameter("id");
        map.put("fees", this.serviceFactory.getPerformaService().getProcedureFeeForAppointment(id));
        return new ModelAndView("setup/feeInvoice", "refData", map);
    }

    public void getProcedureFeeForAppointment(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorName = request.getParameter("doctorList");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getPerformaService().getProcedureFeeForAppointment(doctorName);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void deleteAppointmentProcedure(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getPerformaService().deleteAppointmentProcedure(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView printPrescription(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = new HashMap();
        map.put("patients", this.serviceFactory.getSetupService().getPatient(null, null));
        String userType = request.getSession().getAttribute("userType").toString();
        if (userType.equalsIgnoreCase("ADMIN")) {
            map.put("clinics", this.serviceFactory.getSetupService().getClinic(""));
        } else if (userType.equalsIgnoreCase("DOCTOR")) {
            map.put("doctorId", user.getDoctorId());
        }
        map.put("userType", userType);
        // Map map = new HashMap();
        String id = request.getParameter("id");
        map.put("master", this.serviceFactory.getPerformaService().getPrescriptionMasterById(id));
        map.put("medicines", this.serviceFactory.getPerformaService().getPrescriptionForMedicine(id));
        map.put("tests", this.serviceFactory.getPerformaService().getPrescriptionForLabTest(id));
        return new ModelAndView("performa/viewPrescription", "refData", map);
    }

    public void getAvailablePanelCompanyForDoctors(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        String doctorClinicId = request.getParameter("doctorClinicId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getPerformaService().getAvailablePanelCompanyForDoctors(doctorId);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getProcedureFeeById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String procedureId = request.getParameter("procedureId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getPerformaService().getProcedureFeeById(procedureId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteDoctorProcedure(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getPerformaService().deleteDoctorProcedure(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getMarginsByDoctorId(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getPerformaService().getMarginsByDoctorId(doctorId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void getPatientFeeHistory(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String patientId = request.getParameter("patientId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getPerformaService().getPatientFeeHistory(patientId);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }
}
