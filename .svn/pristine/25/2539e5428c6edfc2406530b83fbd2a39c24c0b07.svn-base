/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alberta.clinic;

import com.alberta.model.Company;
import com.alberta.model.DoctorVO;
import com.alberta.model.User;
import com.alberta.service.ServiceFactory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONObject;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

/**
 *
 * @author farazahmad
 */
public class ClinicController extends MultiActionController {

    private ServiceFactory serviceFactory;

    /**
     * @return the serviceFactory
     */
    public ServiceFactory getServiceFactory() {
        return serviceFactory;
    }

    /**
     * @param serviceFactory the serviceFactory to set
     */
    public void setServiceFactory(ServiceFactory serviceFactory) {
        this.serviceFactory = serviceFactory;
    }

    public ModelAndView prescriptionListing(HttpServletRequest request, HttpServletResponse response) {
        Map map = new HashMap();
        map.put("rightName", "Prescription History");
        User user = (User) request.getSession().getAttribute("user");
        String doctorId = user.getDoctorId();
        //map.put("doctors", this.serviceFactory.getSetupService().getDoctors(null, null, null));
        map.put("doctors", this.serviceFactory.getClinicService().getPrescriptionPatientsForDoctor(doctorId));
        return new ModelAndView("clinic/prescriptionListing", "refData", map);
    }

    public void getPrescriptionListing(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String fromDate = request.getParameter("dateFrom");
        String toDate = request.getParameter("dateTo");
        String patientId = request.getParameter("patientId");
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userType = request.getSession().getAttribute("userType").toString();
        List<JSONObject> objList = new ArrayList();
        if (userType.equalsIgnoreCase("DOCTOR")) {
            Map clinic = (Map) request.getSession().getAttribute("selectedClinic");
            if (clinic != null) {
                String clinicId = clinic.get("TW_CLINIC_ID").toString();
                String doctorId = user.getDoctorId();
                List<Map> list = this.serviceFactory.getClinicService().getPrescriptionListing(fromDate, toDate, doctorId, clinicId,patientId);
                JSONObject obj = null;
                if (list != null && list.size() > 0) {
                    for (int i = 0; i < list.size(); i++) {
                        Map map = (Map) list.get(i);
                        obj = new JSONObject();
                        Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                        while (itr.hasNext()) {
                            String key = itr.next().getKey();
                            obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                        }
                        objList.add(obj);
                    }
                }
            }
        }

        response.getWriter().write(objList.toString());
    }

    public ModelAndView addDoctorProfile(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = new HashMap();
        map = this.serviceFactory.getUmsService().getUserRights(userName, "Doctor Profile");
        map.put("rightName", "Doctor Profile");
        map.put("patients", this.serviceFactory.getSetupService().getPatient(null, null));
        String userType = request.getSession().getAttribute("userType").toString();
        if (userType.equalsIgnoreCase("ADMIN")) {
            map.put("clinics", this.serviceFactory.getSetupService().getClinic(""));
        } else if (userType.equalsIgnoreCase("DOCTOR")) {
            map.put("doctorId", user.getDoctorId());
        }
        map.put("userType", userType);

        //map.put("doctors", this.serviceFactory.getSetupService().getDoctors(null, null, null));
        map.put("categories", this.serviceFactory.getSetupService().getDoctorCagetories(""));
        map.put("lastDegree", this.serviceFactory.getSetupService().getDoctorDegrees(""));
        map.put("degree", this.serviceFactory.getSetupService().getDoctorDegrees(""));
        map.put("hospitals", this.serviceFactory.getClinicService().getHospitals(""));
        map.put("associations", this.serviceFactory.getClinicService().getAssociations(""));
        map.put("medicalColleges", this.serviceFactory.getClinicService().getMedicalColleges(""));
        map.put("countries", this.serviceFactory.getSetupService().getCountry(com.getCompanyId()));
        map.put("types", this.serviceFactory.getSetupService().getDoctorTypes(""));
        map.put("diseases", this.serviceFactory.getSetupService().getDiseases(""));
        return new ModelAndView("clinic/addDoctorProfile", "refData", map);

//      User user = (User) request.getSession().getAttribute("user");
//        String userName = "";
//        if (user != null) {
//            userName = user.getUsername();
//        }
//        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Clinics");
//        map.put("countries", this.serviceFactory.getClinicService().getCountries(""));
//        map.put("rightName", "Clinics");
//   
//         return new ModelAndView("clinic/addCity", "refData", map);
    }

    public void saveDoctorEducation(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);

        String userType = request.getSession().getAttribute("userType").toString();

        boolean flag = this.serviceFactory.getClinicService().saveDoctorEducation(vo);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDoctorEducation(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getDoctorEducation(doctorId);

        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void saveDoctorExperience(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);

        String userType = request.getSession().getAttribute("userType").toString();

        boolean flag = this.serviceFactory.getClinicService().saveDoctorExperience(vo);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDoctorExperience(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getDoctorExperience(doctorId);

        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void saveDoctorAssociation(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);

        String userType = request.getSession().getAttribute("userType").toString();

        boolean flag = this.serviceFactory.getClinicService().saveDoctorAssociation(vo);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDoctorAssociation(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getDoctorAssociation(doctorId);

        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public ModelAndView addDiseases(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Diseases");
        map.put("rightName", "Diseases");
        return new ModelAndView("clinic/addDiseases", "refData", map);
    }

    public void saveDisease(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);

        boolean flag = this.serviceFactory.getClinicService().saveDisease(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDiseases(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String diseaseNameSearch = request.getParameter("diseaseNameSearch");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getDiseases(diseaseNameSearch);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void deleteDisease(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteDisease(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDiseasesById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String diseaseId = request.getParameter("diseaseId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getDiseasesById(diseaseId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addHospital(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Clinics");
        map.put("countries", this.serviceFactory.getClinicService().getCountries(""));
        map.put("cities", this.serviceFactory.getClinicService().getCities(""));
        map.put("rightName", "Add Hospital");
        return new ModelAndView("clinic/addHospital", "refData", map);
    }

    public void saveHospital(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);
        boolean flag = this.serviceFactory.getClinicService().saveHospital(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getHospitalById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String hospitalId = request.getParameter("hospitalId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getHospitalById(hospitalId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void getHospitals(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String hospitalName = request.getParameter("hospitalName");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getHospital(hospitalName);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void deleteHospital(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteHospital(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addMedicalDegrees(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Degrees");

        map.put("rightName", "Degrees");

        return new ModelAndView("clinic/addMedicalDegrees", "refData", map);
    }

    public void saveDegree(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);

        boolean flag = this.serviceFactory.getClinicService().saveDegree(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDegrees(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String degreeName = request.getParameter("degreeName");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getDegrees(degreeName);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getDegreeById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String degreeId = request.getParameter("degreeId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getDegreeById(degreeId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteDegree(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteDegree(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addCountry(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Countries");

        map.put("rightName", "Countries");

        return new ModelAndView("clinic/addCountry", "refData", map);
    }

    public void saveCountry(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);

        boolean flag = this.serviceFactory.getClinicService().saveCountry(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getCountry(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String countryName = request.getParameter("countryName");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getCountry(countryName);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getCountryById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String countryId = request.getParameter("countryId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getCountryById(countryId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteCountry(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteCountry(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addCity(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Cities");
        map.put("countries", this.serviceFactory.getClinicService().getCountries(""));
        map.put("rightName", "Cities");

        return new ModelAndView("clinic/addCity", "refData", map);
    }

    public void deleteCity(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteCity(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getCityById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String cityId = request.getParameter("cityId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getCityById(cityId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void getCity(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String cityName = request.getParameter("cityName");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getCity(cityName);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void saveCity(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);

        boolean flag = this.serviceFactory.getClinicService().saveCity(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addMedicalServices(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Medical Services");

        map.put("rightName", "Medical Services");

        return new ModelAndView("clinic/addMedicalServices", "refData", map);
    }

    public void saveMedicalServices(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);

        boolean flag = this.serviceFactory.getClinicService().saveMedicalServices(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getMedicalServices(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String servicesNameSearch = request.getParameter("servicesNameSearch");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getMedicalServices(servicesNameSearch);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getMedicalServiceById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String serviceId = request.getParameter("serviceId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getMedicalServiceById(serviceId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteMedicalService(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteMedicalService(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addEducationInstitution(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Colleges");
        map.put("countries", this.serviceFactory.getClinicService().getCountries(""));
        map.put("cities", this.serviceFactory.getClinicService().getCities(""));
        map.put("rightName", "Colleges");
        return new ModelAndView("clinic/addEducationInstitution", "refData", map);
    }

    public void saveEducationInstitution(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);
        boolean flag = this.serviceFactory.getClinicService().saveEducationInstitution(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getEducationInstitutions(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String medicalCollegeName = request.getParameter("medicalCollegeName");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getEducationInstitutions(medicalCollegeName);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getEducationInstitutionById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String medicalCollegeId = request.getParameter("medicalCollegeId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getEducationInstitutionById(medicalCollegeId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteEducationInstitution(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteEducationInstitution(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addLabTest(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Lab Tests");
        map.put("rightName", "Lab Tests");
        return new ModelAndView("clinic/addLabTest", "refData", map);
    }

    public void saveLabTest(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);

        boolean flag = this.serviceFactory.getClinicService().saveLabTest(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getLabTests(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String labTestNameSearch = request.getParameter("labTestNameSearch");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getLabTests(labTestNameSearch);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getLabtestById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String labTestId = request.getParameter("labTestId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getLabtestById(labTestId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteLabTest(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteLabTest(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addMedicine(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = this.serviceFactory.getUmsService().getUserRights(userName, "Medicines");
        map.put("rightName", "Medicines");
        return new ModelAndView("clinic/addMedicine", "refData", map);
    }

    public void saveMedicine(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);
        boolean flag = this.serviceFactory.getClinicService().saveMedicine(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getMedicines(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String medicineNameSearch = request.getParameter("medicineNameSearch");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getMedicines(medicineNameSearch);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getMedicineById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String medicineId = request.getParameter("medicineId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getMedicineById(medicineId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void deleteMedicine(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String id = request.getParameter("id");
        boolean flag = this.serviceFactory.getClinicService().deleteMedicine(id);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public ModelAndView addMessages(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = new HashMap();
        map = this.serviceFactory.getUmsService().getUserRights(userName, "SMS Templates");
        map.put("rightName", "SMS Templates");
        map.put("patients", this.serviceFactory.getSetupService().getPatient(null, null));
        String userType = request.getSession().getAttribute("userType").toString();
        if (userType.equalsIgnoreCase("ADMIN")) {
            map.put("clinics", this.serviceFactory.getSetupService().getClinic(""));
        } else if (userType.equalsIgnoreCase("DOCTOR")) {
            map.put("doctorId", user.getDoctorId());
        }
        map.put("userType", userType);
//        map = this.serviceFactory.getUmsService().getUserRights(userName, "SMS Templates");
//        map.put("rightName", "SMS Templates");
        return new ModelAndView("clinic/sendMessage", "refData", map);
    }

    public void saveMessage(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        String companyId = com.getCompanyId();
        c.setCompanyId(companyId);
        c.setUserName(userName);
        boolean flag = this.serviceFactory.getClinicService().saveMessage(c);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getMessage(HttpServletRequest request, HttpServletResponse response, DoctorVO c) throws IOException {
        String medicineNameSearch = request.getParameter("medicineNameSearch");
        Company com = (Company) request.getSession().getAttribute("company");
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        c.setUserName(userName);
        List<Map> list = this.serviceFactory.getClinicService().getMessage(c);
        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public ModelAndView addPrintLayout(HttpServletRequest request, HttpServletResponse response) {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        Map map = new HashMap();
        map = this.serviceFactory.getUmsService().getUserRights(userName, "Print Layout");
        map.put("rightName", "Print Layout");
        map.put("patients", this.serviceFactory.getSetupService().getPatient(null, null));
        String userType = request.getSession().getAttribute("userType").toString();
        if (userType.equalsIgnoreCase("ADMIN")) {
            map.put("clinics", this.serviceFactory.getSetupService().getClinic(""));
        } else if (userType.equalsIgnoreCase("DOCTOR")) {
            map.put("doctorId", user.getDoctorId());
        }
        map.put("userType", userType);
        return new ModelAndView("clinic/setPrintLayout", "refData", map);
    }

    public void savePrintLayout(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        Company com = (Company) request.getSession().getAttribute("company");
        String companyId = com.getCompanyId();
        String userName = request.getSession().getAttribute("userName") != null ? request.getSession().getAttribute("userName").toString() : "";
        vo.setUserName(userName);
        vo.setCompanyId(companyId);
        String userType = request.getSession().getAttribute("userType").toString();

        boolean flag = this.serviceFactory.getClinicService().savePrintLayout(vo);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getPrintLayouts(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getPrintLayouts(doctorId);

        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }

    public void getPrintLayoutById(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String layoutId = request.getParameter("layoutId");
        Company com = (Company) request.getSession().getAttribute("company");
        Map map = this.serviceFactory.getClinicService().getPrintLayoutById(layoutId);
        JSONObject obj = new JSONObject();
        if (map != null) {
            Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
            while (itr.hasNext()) {
                String key = itr.next().getKey();
                obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
            }
        }
        response.getWriter().write(obj.toString());
    }

    public void saveDoctorAttachment(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        vo.setUserName(userName);
        String attachmentPath = request.getServletContext().getRealPath("/upload/doctor/doctorAttachments/");
        boolean flag = this.serviceFactory.getClinicService().saveDoctorAttachment(vo, attachmentPath);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void saveDoctorProfile(HttpServletRequest request, HttpServletResponse response, DoctorVO vo) throws IOException {
        User user = (User) request.getSession().getAttribute("user");
        String userName = "";
        if (user != null) {
            userName = user.getUsername();
        }
        vo.setUserName(userName);
        String attachmentPath = request.getServletContext().getRealPath("/upload/doctor/profilePic/");
        boolean flag = this.serviceFactory.getClinicService().saveDoctorProfile(vo, attachmentPath);
        JSONObject obj = new JSONObject();
        if (flag) {
            obj.put("result", "save_success");
        } else {
            obj.put("result", "save_error");
        }
        response.getWriter().write(obj.toString());
    }

    public void getDoctorAppointedPatients(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String doctorId = request.getParameter("doctorId");
        Company com = (Company) request.getSession().getAttribute("company");
        List<Map> list = this.serviceFactory.getClinicService().getDoctorAppointedPatients(doctorId);

        List<JSONObject> objList = new ArrayList();
        JSONObject obj = null;
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Map map = (Map) list.get(i);
                obj = new JSONObject();
                Iterator<Map.Entry<String, Object>> itr = map.entrySet().iterator();
                while (itr.hasNext()) {
                    String key = itr.next().getKey();
                    obj.put(key, map.get(key) != null ? map.get(key).toString() : "");
                }
                objList.add(obj);
            }
        }
        response.getWriter().write(objList.toString());
    }
}
